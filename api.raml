#%RAML 1.0
title: shotstack
version: v1
mediaType: application/json
baseUri: https://api.shotstack.io/{version}
description: |
  The Shotstack API is a video editing service that allows for the programatic
  creation of videos using JSON.

securitySchemes:
  DeveloperKey:
    description: |
      Secured using an API developer key as specified.
    type: x-custom
    describedBy:
      headers:
        x-api-key:
          description: |
            Use your provided 40 character developer key
          type: string
      responses:
        403:
          description: |
            Access is denied

types:
  Edit:
    description: |
      An edit defines the content of the video in a timeline and the output
      format.
    properties:
      timeline: Timeline
      output: Output

  Timeline:
    description: |
      A timeline represents the contents of a video edit over time, in seconds.
      A timeline consists of layers called tracks. Tracks are composed of
      titles, images or video segments referred to as clips which are placed
      along the track at specific starting point and lasting for a specific
      amount of time.
    properties:
      soundtrack?:
        type: Soundtrack
        description: |
          A music or audio soundtrack file in mp3 format.
      background?:
        type: string
        description: |
          A hexidecimal value for the timeline background colour. Defaults to
          black (#000000).
      tracks:
        type: Track[]
        description: |
          A timeline consists of an array of tracks, each track containing clips.
          Tracks are layered on top of each other in the same order they are
          added to the array with the top most track layered over the top of
          those below it. Ensure that a track containing titles is the top most
          track so that it is displayed above videos and images.

  Soundtrack:
    description: |
      A music or audio file in mp3 format that plays for the duration of the
      rendered video or the length of the audio file, which ever is shortest.
    properties:
      src:
        description: |
          The URL of the mp3 audio file. The URL must be publicly accessible or
          include credentials.
      effect?:
        description: The effect to apply to the audio file
        type: string
        enum: !include effects/soundtrack.raml

  Track:
    description: |
      A track contains an array of clips. Tracks are layered on top of each
      other in the order in the array. The top most track will render on top of
      those below it.
    properties:
      clips:
        type: array
        items: Clip
        description: An array of Clips comprising of TitleClip, ImageClip or VideoClip.

  Clip:
    description: |
      A clip is a container for a specific type of asset, i.e. a title, photo or video.
      You use a Clip to define when an asset will display on the timeline, how long it
      will play for and transitions and effects to apply to it.
    properties:
      asset:
        type: TitleAsset | ImageAsset | VideoAsset
        description: |
          The type of asset to display for the duration of this Clip.
          Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b> or <b>VideoAsset</b>.
      start:
        type: number
        description: The start position of the Clip on the timeline, in seconds.
      length:
        type: number
        description: The length, in seconds, the Clip should play for.
      transition?: Transition
      effect?:
        description: A motion effect to apply to the Clip.
        type: string
        enum: !include effects/effects.raml
      filter?:
        description: A filter effect to apply to the Clip.
        type: string
        enum: !include filters/filters.raml

  TitleAsset:
    description: |
      The TitleAsset clip type lets you create video titles from a text string and
      apply styling and positioning.
    type: object
    properties:
      type:
        type: string
        default: title
        description: The type of asset - set to <b>title</b> for titles.
      text:
        type: string
        description: The title text string - i.e. "My Title".
      style?:
        description: |
          Uses a preset to apply font properties and stylng to the title.
        type: string
        enum: !include styles/styles.raml
      color?:
        description: |
          Set the text color using HTML color notation including hexidecimal, rgb, rgba and 
          color name. Transparency is supported by setting the last two characters of a hex string, 
          i.e. #ffffff33 or using rgba, i.e. rgba(255, 255, 255, 0.5).
        type: string
        default: white
      size?:
        description: |
          Set the relative size of the text using predefined sizes from xx-small to xx-large.
        type: string
        enum: [xx-small, x-small, small, medium, large, x-large, xx-large]
        default: medium
      background?:
        description: |
          Apply a background color behind the text using HTML color notation with support for 
          transparency. Useful for subtitles.
        type: string
      position?:
        description: |
          Place the title in one of nine predefined positions of the viewport.
        type: string
        enum: [top, topRight, right, bottomRight, bottom, bottomLeft, left, topLeft, center]
        default: center
      offset?:
        description: |
          Offset the location of the title relative to it's position on the screen.
        type: Offset

  ImageAsset:
    description: |
      The ImageAsset is used to create video from images. The src
      must be a publicly accesible URL to an image resource such as a jpg or
      png file.
    type: object
    properties:
      type:
        type: string
        default: image
        description: The type of asset - set to <b>image</b> for images.
      src:
        type: string
        description: |
          The image source URL. The URL must be publicly accessible or
          include credentials.

  VideoAsset:
    description: |
      The VideoAsset is used to create video sequences from video files. The src
      must be a publicly accesible URL to a video resource such as an mp4 file.
      The in and out attributes of the parent Clip let you trim the video file
      by setting the start and end point to use.
    type: object
    properties:
      type:
        type: string
        default: video
        description: The type of asset - set to <b>video</b> for videos.
      src:
        type: string
        description: |
          The video source URL. The URL must be publicly accessible or
          include credentials.
      trim?:
        type: number
        description: |
          The start trim point of the clip, in seconds (defaults to 0). Videos will start from the
          in trim point. The video will play until the file ends or the
          Clip length is reached.
      volume?:
        description: |
          Set the volume for the clip between 0 and 1 where 0 is muted and 1 is
          full volume (defaults to 0).
        type: number

  Transition:
    description: In and out transitions for a clip - i.e. fade in and fade out
    properties:
      in?:
        description: The transition in
        type: string
        enum: !include transitions/transitions.raml
      out?:
        description: The transition out
        type: string
        enum: !include transitions/transitions.raml

  Offset:
    description: |
      Offsets the position of an asset horizontally or vertically by a relative distance.
    properties:
      x?:
        description: Offset an asset on the horizontal axis (left or right), range varies from -1 to 1.
        type: number
      y?:
        description: Offset an asset on the vertical axis (up or down), range varies from -1 to 1.
        type: number

  Output:
    description: The video output format
    properties:
      format:
        type: string
        enum: [mp4, gif]
      resolution:
        type: string
        enum: [preview, mobile, sd, hd, '1080']

  QueuedResponse:
    properties:
      success: boolean
      message: string
      response: QueuedResponseData

  QueuedResponseData:
    properties:
      message:
        description: Success response message
      id:
        description: The id of the render task in UUID format

  RenderResponse:
    properties:
      success: boolean
      message: string
      response: RenderResponseData

  RenderResponseData:
    properties:
      status:
        description: The status of the render task
        type: string
        enum: [queued, fetching, rendering, saving, done, failed]
      id:
        description: The id of the render task in UUID format
      owner:
        description: The owner id of the render task
      url?:
        description: The URL of the final video. This will only be available if status is done.
      data:
        type: Edit
        description: The timeline and output data to be rendered
      created:
        description: The time the render task was initially queued
      updated:
        description: The time the render status was last updated

/render:
  post:
    description: Render the contents of a timeline as a video file.
    securedBy: DeveloperKey
    body:
      application/json:
        type: Edit
        example: !include examples/timeline.raml
    responses:
       201:
        body:
          application/json:
            type: QueuedResponse
            example:
              success: true
              message: "Created"
              response:
                message: "Render Successfuly Queued"
                id: "2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7"
  /{id}:
    uriParameters:
      id:
        type: string
        description: The id of the timeline render task in UUID format
        example: "2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7"
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    get:
      description: Get the rendering status, video url and details of a timeline by ID.
      securedBy: DeveloperKey
      responses:
        200:
          body:
            application/json:
              type: RenderResponse
              example:
                success: true
                message: "OK"
                response:
                  status: "rendering"
                  id: "2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7"
                  owner: "5ca6hu7s9k"
                  url: "https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4"
                  data: !include examples/timeline.raml
                  created: "2018-05-06T03:33:25.425Z"
                  updated: "2018-05-06T03:33:48.521Z"



documentation:
 - title: Introduction
   content: |
     EditEngine enables developers to describe and output an edited video using
     JSON. Sources include video and image files as well as text to create
     titles.
